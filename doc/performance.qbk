[/
          Copyright Oliver Kowalke 2016.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:performance Performance]

Performance measurements were taken using `std::chrono::highresolution_clock`,
with overhead corrections.
The code was compiled with gcc-6.20 and iusing the build options:
variant = release, optimization = speed.
Tests were executed on Intel Core i7-4770S 3.10GHz (4C/8T), Linux (4.7.0/x86_64)

The [@https://github.com/atemerev/skynet microbenchmark ['syknet]] from
Alexander Temerev was ported and used for performance measurements.
At the root the test spawns 10 threads-of-execution (ToE), e.g.
actor/goroutine/fiber etc.. Each spawned ToE spawns additional 10 ToEs ...
until 100000 ToEs are created. ToEs return back ther ordinal numbers
(0 ... 99999), which are summed on the previous level and sent back upstream,
until reaching the root.

[table performance of N=100000 actors/goroutines (other languages)
    [
         [Haskell | stack-1.0.4]
         [Erlang | erts-7.0]
         [Go | go1.6.1 (GOMAXPROCS == default)]
         [Go | go1.6.1 (GOMAXPROCS == 8)]
    ]
    [
        [32 ms]
        [64 ms - 121 ms]
        [152 ms - 164 ms]
        [70 ms - 98 ms]
    ]
]

The test utilizes 4 cores with enabled SMT (8 logical CPUs). The fiber
stacks are allocated by __fixedsize_stack__.

As the benchmark shows, the memory allocation algorithm is significant for
performance in a multithreaded environment. The tests use glibc's memory
allocation algorithm (based on ptmalloc2) as well as Google's
[@http://goog-perftools.sourceforge.net/doc/tcmalloc.html TCmalloc] (via
linkflags="-ltcmalloc").
[footnote Tais B. Ferreira, Rivalino Matias, Autran Macedo, Lucio B. Araujo
["An Experimental Study on Memory Allocators in Multicore and
Multithreaded Applications"], PDCAT '11 Proceedings of the 2011 12th
International Conference on Parallel and Distributed Computing, Applications
and Technologies, pages 92-98].

The __shared_work__ scheduling algorithm uses one global queue, containing
fibers ready to run, shared between all threads. The work is distributed equaly
over all threads.
In the __work_stealing__ scheduling algorithm each thread has its own local
queue. Fibers that are ready to run are pushed to and poped from the local
queue. If the queue runs out of ready fibers, fibers are stolen from local
queues of other threads.

[table performance of N=100000 fibers
    [
         [fiber (1C/1T, round robin)]
         [fiber (1C/1T, round robin, tcmalloc)]
         [fiber (4C/8T, work sharing)]
         [fiber (4C/8T, work sharing, tcmalloc)]
         [fiber (4C/8T, work stealing)]
         [fiber (4C/8T, work stealing, tcmalloc)]
    ]
    [
        [91 ms - 128 ms]
        [90 ms - 103 ms]
        [90 ms - 111 ms]
        [62 ms - 80 ms]
        [35 ms - 66 ms]
        [13 ms - 26 ms]
    ]
]


[section:tweaking Tweaking]

__boost_fiber__ enables synchronization of fibers running on different threads
per default. This is accomplished on behalf of spinlocks (using atomics).
(BOOST_FIBERS_SPINLOCK_STD_MUTEX applied at compiler's command line enables
`std::mutex` instead of spinlocks).


[heading disable synchronization]

With [link cross_thread_sync `BOOST_FIBERS_NO_ATOMICS`] at compiler's command
line, synchronization between fibers (in different threads) is disabled. This
is suitable if the application is single threaded and/or fibers are not
synchronized between threads.


[heading TTAS locks]

Spinlocks are implemented as TTAS locks, e.g. the spinlock tests the lock before
calling an atomic exchange. This strategy helps to reduce the cache line
invalidations triggered by acquire/release the lock.


[heading spin-wait loop]

A lock is considered under high contention, if a thread subsequently fails to
acquire the lock because some other thread was faster.
Waiting for a short time let other threads finish before trying to enter the
critical section again. While busy waiting on the lock, relaxing the CPU (via
pause/yield memnonic) gives the CPU a hint that the code is in a spin-wait loop.

- prevents expensive pipeline flushes (speculatively executed load and compare
  instructions not pushed to pipeline)
- hardware thread (simultaneous multithreading) gets time slice
- delay of few CPU cycles

It is obvious that this strategy is useless on single core systems because the
lock can only released if the thread gives up its time slice in order to let
other threads run. Macro BOOST_FIBERS_SPIN_SINGLE_CORE disables active spinning,
e.g. der operating system is notified (via `std::this_thread_yield()`) that the
thread gives up its time slice and the operating system switches to another
thread.


[heading exponential back-off]

Macro BOOST_FIBERS_SPIN_MAX_TESTS determines how many times the CPU gets the
spin-wait loop hint before yielding the thread or blocking in futex-wait.
The spinlock tracks how many time the thread failed to acquire the lock.
The higher the contention, the longer the thread should back-off.
'Binary Exponential Backoff' algorithm together with a randomized contention
window is utilized for this purpose.
BOOST_FIBERS_SPIN_MAX_COLLISIONS determines the upper limit of collisions
between threads after the thread waits on a futex.


[table macros for tweaking
    [
        [BOOST_FIBERS_NO_ATOMICS]
        [no multithreading, all atomics removed, no synchronization of fibers
        running in different threads]
    ]
    [
        [BOOST_FIBERS_SPINLOCK_STD_MUTEX]
        [`std::mutex` used inside spinlock]
    ]
    [
        [BOOST_FIBERS_SPINLOCK_TTAS]
        [spinlock with test-test-and-swap on shared variable]
    ]
    [
        [BOOST_FIBERS_SPINLOCK_TTAS_ADAPTIVE]
        [spinlock with test-test-and-swap on shared variable, while busy
        waiting adaptive retries]
    ]
    [
        [BOOST_FIBERS_SPINLOCK_TTAS_FUTEX]
        [spinlock with test-test-and-swap on shared variable, suspend on
        futex after certain amount of retries]
    ]
    [
        [BOOST_FIBERS_SPINLOCK_TTAS_ADAPTIVE_FUTEX]
        [spinlock with test-test-and-swap on shared variable, while busy
        waiting adaptive retries, suspend on futex certain amount of retries]
    ]
    [
        [BOOST_FIBERS_SPIN_SINGLE_CORE]
        [on single core machines with multiple threads, yield thread
        (`std::this_thread::yield()`) after collisions]
    ]
    [
        [BOOST_FIBERS_SPIN_MAX_TESTS]
        [max amount of retries while busy spinning]
    ]
    [
        [BOOST_FIBERS_SPIN_MAX_COLLISIONS]
        [max amount of collisions between contented threads]
    ]
]

[endsect]

[endsect]
