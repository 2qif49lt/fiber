[/
      Copyright Oliver Kowalke, Nat Goodspeed 2015.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[/ import path is relative to this .qbk file]
[import ../examples/work_sharing.cpp]

[#migration]
[section:migration Migrating fibers between threads]

[heading Overview]

Each fiber owns a stack and saves its execution state, including all registers
and CPU flags, the instruction pointer, and the stack pointer in order to
restore its state later. That means, in general, a fiber is not bound to a
thread per se (of course, the code executed inside the fiber must not use TLS).

Migrating a fiber from a logical CPU with heavy work-load to another idle
logical CPU (or with less work-load) might speed-up the overall execution.
Note that in the case of NUMA-architectures, it is not always advisable to
migrate data between threads. Suppose fiber ['f] is running on logical CPU
['cpu0] which belongs to NUMA node ['node0]. The data of ['f] are allocated on
the physical memory located at ['node0]. Migrating the fiber from ['cpu0] to
another logical CPU ['cpuX] which is part of a different NUMA node ['nodeX]
will reduce the performance of the application because of increased latency of
memory access.

Only fibers, that are contained in __algo__'s ready-queue are allowed to be
migrated between threads.

In__boost_fiber__ a fiber is migrated by invoking __context_migrate__ and pass
the fiber as argument in the thread to which the fiber has to be moved.


[heading Setup of threads and fibers]

[main_ws]

[thread_fn_ws]

[fiber_fn_ws]

[heading Scheduling fibers]

[rqueue_t_ws]
[rqueue_ws]
[awakended_ws]
[pick_next_ws]


[/ @path link is relative to (eventual) doc/html/index.html, hence ../..]
The source code above is found in
[@../../examples/work_sharing.cpp work_sharing.cpp].

[endsect]
