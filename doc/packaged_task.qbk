[/
          Copyright Oliver Kowalke 2013.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:packaged_task Template `packaged_task<>`]

        template< typename R >
        class packaged_task
        {
        public:
            packaged_task() noexcept;

            template< typename Fn >
            explicit packaged_task( Fn && fn);

            template< typename Fn, typename Allocator >
            explicit packaged_task( boost::allocator_arg_t, Allocator const& alloc, Fn && fn);

            packaged_task( packaged_task && other) noexcept;

            packaged_task( packaged_task const& other) = delete;

            ~packaged_task();

            packaged_task & operator=( packaged_task && other) noexcept;

            packaged_task & operator=( packaged_task const& other) = delete;

            void swap( packaged_task & other) noexcept;

            operator safe_bool() const noexcept;

            bool operator!() const noexcept;

            bool valid() const noexcept;

            future< R > get_future();

            void operator()();

            void reset();
        };

[heading Default constructor `packaged_task()`]

        packaged_task();

[variablelist
[[Effects:] [Constructs an object of class `packaged_task`.]]
[[Throws:] [Nothing.]]
]

[heading Templated constructor `template<> packaged_task()`]

        template< typename Fn >
        explicit packaged_task( Fn && fn);
        
        template< typename Fn, typename Allocator >
        explicit packaged_task( boost::allocator_arg_t, Allocator const& alloc, Fn && fn);

[variablelist
[[Effects:] [Constructs an object of class `packaged_task`.]]
[[Throws:] [Nothing.]]
]

[endsect]
