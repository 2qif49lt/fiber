# Boost.strand Library Build Jamfile

#          Copyright Oliver Kowalke 2013.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import feature ;
import modules ;
import toolset ;

project boost/fiber
    : requirements
      <library>/boost/coroutine//boost_coroutine
      <library>/boost/chrono//boost_chrono
      <toolset>gcc-4.7,<segmented-stacks>on:<cxxflags>-fsplit-stack
      <toolset>gcc-4.7,<segmented-stacks>on:<linkflags>"-static-libgcc"
      <toolset>gcc-4.8,<segmented-stacks>on:<cxxflags>-fsplit-stack
      <toolset>gcc-4.8,<segmented-stacks>on:<linkflags>"-static-libgcc"
      <link>shared:<define>BOOST_FIBERS_DYN_LINK=1
      <define>BOOST_FIBERS_SOURCE
    : usage-requirements
		<link>shared:<define>BOOST_FIBERS_DYN_LINK=1
    : source-location ../src
    ;

alias allocator_sources
    : detail/standard_stack_allocator_windows.cpp
    : <target-os>windows
    ;

alias allocator_sources
    : detail/standard_stack_allocator_posix.cpp
      detail/segmented_stack_allocator.cpp
    : <segmented-stacks>on
    ;

alias allocator_sources
    : detail/standard_stack_allocator_posix.cpp
    ;

explicit allocator_sources ;

alias yield_sources
    : detail/windows_thread_yield.cpp
    : <target-os>windows
    ;

alias yield_sources
    : detail/posix_thread_yield.cpp
    ;

explicit yield_sources ;

lib boost_fiber
    : allocator_sources
      yield_sources
      asio/io_service.cpp
      barrier.cpp
      condition.cpp
      detail/fiber_base.cpp
      detail/fiber_context.cpp
      detail/scheduler.cpp
      fiber.cpp
      fiber_group.cpp
      future.cpp
      interruption.cpp
      mutex.cpp
      recursive_mutex.cpp
      recursive_timed_mutex.cpp
      round_robin.cpp
      timed_mutex.cpp
    : <link>shared:<library>../../coroutine/build//boost_coroutine
      <link>shared:<library>../../chrono/build//boost_chrono
    ;

boost-install boost_fiber ;
