[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[article Tasklet
    [quickbook 1.4]
    [authors [Kowalke, Oliver]]
    [copyright 2009 Oliver Kowalke]
    [purpose C++ Library for cooperativly schedule and synchronize multiple tasklets (micro-tasks) in one thread]
    [category text]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]


[def __boost_atomic__ [*Boost.Atomic]]
[def __boost_context__ [*Boost.Context]]
[def __boost_move__ [*Boost.Move]]
[def __boost_tasklet__ [*Boost.Tasklet]]
[def __boost_thread__ [*Boost.Thread]]

[template auto_reset_link[link_text] [link tasklet.synchronization.eventvar_ref.auto_reset_event [link_text]]]
[template barrier_link[link_text] [link tasklet.synchronization.barriers [link_text]]]
[template condition_link[link_text] [link tasklet.synchronization.conditions.condition [link_text]]]
[template count_down_link[link_text] [link tasklet.synchronization.eventvar_ref.count_down_event [link_text]]]
[template manual_reset_link[link_text] [link tasklet.synchronization.eventvar_ref.manual_reset_event [link_text]]]
[template mutex_link[link_text] [link tasklet.synchronization.mutex_types.mutex [link_text]]]
[template scheduler_link[link_text] [link tasklet.tasklet_management.scheduler [link_text]]]
[template scheduler_thread_link[link_text] [link tasklet.tasklet_management.scheduler_thread [link_text]]]
[template tasklet_id_link[link_text] [link tasklet.tasklet_management.tasklet.id [link_text]]]
[template tasklet_link[link_text] [link tasklet.tasklet_management.tasklet [link_text]]]

[template auto_reset_wait_link[link_text] [link tasklet.synchronization.eventvar_ref.auto_reset_event.wait [link_text]]]
[template manual_reset_wait_link[link_text] [link tasklet.synchronization.eventvar_ref.manual_reset_event.wait [link_text]]]
[template count_down_wait_link[link_text] [link tasklet.synchronization.eventvar_ref.count_down_event.wait [link_text]]]
[template cond_wait_link[link_text] [link tasklet.synchronization.conditions.condition.wait [link_text]]]

[template disable_interr_link[link_text] [link tasklet.tasklet_management.this_tasklet.disable_interruption [link_text]]]
[template interr_enabled_link[link_text] [link tasklet.tasklet_management.this_tasklet.interruption_enabled [link_text]]]
[template interr_point_link[link_text] [link tasklet.tasklet_management.this_tasklet.interruption_point [link_text]]]
[template interr_points_link[link_text] [link tasklet.tasklet_management.predefined_interruption_points [link_text]]]
[template interr_requested_link[link_text] [link tasklet.tasklet_management.this_tasklet.interruption_requested [link_text]]]
[template interrupt_link[link_text] [link tasklet.tasklet_management.tasklet.interrupt [link_text]]]
[template join_link[link_text] [link tasklet.tasklet_management.tasklet.join [link_text]]]
[template restore_interr_link[link_text] [link tasklet.tasklet_management.this_tasklet.restore_interruption [link_text]]]
[template tasklet_yield_link[link_text] [link tasklet.tasklet_management.this_tasklet.yield [link_text]]]
[template scheduler_yield_link[link_text] [link tasklet.tasklet_management.scheduler.yield [link_text]]]
[template scheduler_run_link[link_text] [link tasklet.tasklet_management.scheduler.run [link_text]]]
[template scheduler_empty_link[link_text] [link tasklet.tasklet_management.scheduler.empty [link_text]]]

[def __blocked__ ['blocked]]
[def __not_a_tasklet__ ['not-a-tasklet]]
[def __lockable_concept__ ['lockable concept]]
[def __rendezvous__ ['rendezvous]]

[def __auto_reset_event__ [auto_reset_link ['auto-reset event]]]
[def __barrier__ [barrier_link ['barrier]]]
[def __condition__ [condition_link ['condition]]]
[def __count_down_event__ [count_down_link ['count-down event]]]
[def __interruption_points__ [interr_points_link ['interruption points]]]
[def __manual_reset_event__ [manual_reset_link ['manual-reset event]]]
[def __mutex__ [mutex_link ['mutex]]]
[def __scheduler__ [scheduler_link ['scheduler]]]
[def __tasklet_id__ [tasklet_id_link ['tasklet-id]]]
[def __tasklet__ [tasklet_link ['tasklet]]]

[def __cond_wait__ [cond_wait_link `wait()`]]
[def __interrupt__ [interrupt_link `interrupt()`]]
[def __join__ [join_link `join()`]]
[def __lock__ `lock()`]
[def __try_lock__ `try_lock()`]
[def __unlock__ `unlock()`]

[def __interruption_enabled__ [interr_enabled_link `boost::this_tasklet::interruption_enabled()`]]
[def __interruption_requested__ [interr_requested_link `boost::this_tasklet::interruption_requested()`]]
[def __interruption_point__ [interr_point_link `boost::this_tasklet::interruption_point()`]]
[def __disable_interruption__ [disable_interr_link `boost::this_tasklet::disable_interruption`]]
[def __restore_interruption__ [restore_interr_link `boost::this_tasklet::restore_interruption`]]

[def __scheduler_empty__ [scheduler_empty_link `boost::scheduler::empty()`]]
[def __scheduler_run__ [scheduler_run_link `boost::scheduler::run()`]]
[def __scheduler_yield__ [scheduler_yield_link `boost::scheduler::yield()`]]
[def __tasklet_yield__ [tasklet_yield_link `boost::this_tasklet::yield()`]]

[def __tasklet_error__ `boost::tasklets::tasklet_error`]
[def __tasklet_interrupted__ `boost::tasklets::tasklet_interrupted`]
[def __tasklet_moved__ `boost::tasklets::tasklet_moved`]
[def __invalid_argument__ `std::invalid_argument`]
[def __lock_error__ `boost::tasklets::lock_error`]



[include overview.qbk]
[include tasklet_ref.qbk]
[include synchronization.qbk]
[include todo.qbk]
