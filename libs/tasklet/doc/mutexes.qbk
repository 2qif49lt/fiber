[/
  (C) Copyright 2007-8 Anthony Williams.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:mutex_types Mutex Types]

[section:mutex Class `mutex`]

    #include <boost/tasklets/mutex.hpp>

    class mutex : private boost::noncopyable
    {
    public:
        mutex();

        ~mutex();

        void lock();
        bool try_lock();
        void unlock();

        typedef unique_lock< mutex > scoped_lock;
    };

__mutex__ implements the __lockable_concept__ to provide an exclusive-ownership
mutex. At most one tasklet can own the lock on a given instance of __mutex__ at
any time. Multiple concurrent calls to __lock__, __try_lock__ and __unlock__
shall be permitted.

The tasklets blocked in __lock__ are suspended in the scheduler until get
signaled.

[endsect]

[section:spin_mutex Class `spin_mutex`]

    #include <boost/tasklets/spin_mutex.hpp>

    class spin_mutex : private boost::noncopyable
    {
    public:
        spin_mutex();

        ~spin_mutex();

        void lock();
        bool try_lock();
        void unlock();

        typedef unique_lock< spin_mutex > scoped_lock;
    };

__spin_mutex__ implements the __lockable_concept__ to provide an
exclusive-ownership mutex. At most one tasklet can own the lock on a given
instance of __mutex__ at any time. Multiple concurrent calls to __lock__,
__try_lock__ and __unlock__ shall be permitted.

The tasklets and threads blocked in __lock__ are spin waiting until the lock get
released, e.g. try to get an  calling __tasklet_yield__/__thread_yield__.


[endsect]

[endsect]
