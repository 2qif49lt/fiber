[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:overview Overview]

__boost_tasklet__  executes micro-tasks (tasklets) in a thread and assigns each
small task with a micro-thread/fiber - so tasklets are cooperativly scheduled.
The API contains classes and functions to manage and synchronize tasklets (even
if the tasklets are running on different threads).

The fiber associated with the tasklet is able to store the current execution
state, including all registers and CPU flags, the instruction pointer, and the
stack pointer and later restore this state. The idea is to have multiple
tasks/execution paths running on a single thread using a sort of cooperative
scheduling (threads are preemptively scheduled) - the running tasklet decides
explicitly when its yields to allow another tasklet to run (context switching).
A context switch between threads costs usally thousends of CPU cycles on x86
compared to a tasklet switch with few hundreds of cycles.
A tasklet can only run on a single thread at any point in time but may be
migrated between threads.

In order to use the classes and functions described here, you can either include
the specific headers specified by the descriptions of each class or function, or
include the master library header:

    #include <boost/tasklet.hpp>

which includes all the other headers in turn.

Used namespaces are:

    namespace boost::tasklets
    namespace boost::this_tasklet


[warning This library is ['not] an official Boost library]

__boost_tasklet__ depends uppon __boost_atomic__, __boost_fiber__ and
__boost_move__.


[heading How to build and install]

* download the sources from
[@http://www.boost-consulting.com/vault/index.php?directory=Concurrent%20Programming Boost Vault]
* extract the archive into the boost-source directory
* call ['bjam] (consider installation options of __boost_fiber__)


[endsect]
